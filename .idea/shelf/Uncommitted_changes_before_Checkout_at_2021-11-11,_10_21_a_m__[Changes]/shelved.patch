Index: src/main/ui/StockPanel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ui;\n\nimport model.Inventory;\nimport model.QuantityTag;\n\nimport javax.swing.*;\nimport javax.swing.table.AbstractTableModel;\nimport javax.swing.table.DefaultTableModel;\nimport javax.swing.table.TableCellEditor;\nimport javax.swing.table.TableCellRenderer;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.util.EventObject;\nimport java.util.List;\n\n//A panel that will display stock situation of the inventory\npublic class StockPanel extends JPanel {\n    private StockTableModel tableModel;\n    private Inventory inventory;\n    private String[] columnNames = {\"Code\", \"Quantity\", \"Search\"};\n    private StockTableCellRenderer renderer;\n\n    //represents a table model\n    //that will contain information of stock situation with buttons to search for quantities at different locations\n    private class StockTableModel extends AbstractTableModel implements ActionListener {\n        List<String> codes = inventory.getListOfCodes();\n\n\n        private StockTableModel() {\n            renderer = new StockTableCellRenderer();\n        }\n\n        //EFFECTS: return row number\n        @Override\n        public int getRowCount() {\n            return codes.size();\n        }\n\n        //EFFECTS: return column number\n        @Override\n        public int getColumnCount() {\n            return 3;\n        }\n\n        //EFFECTS: return the value in a particular cell.\n        @Override\n        public Object getValueAt(int rowIndex, int columnIndex) {\n            String code = codes.get(rowIndex);\n            if (columnIndex == 0) {\n                return code;\n            } else if (columnIndex == 1) {\n                return inventory.getQuantity(code);\n            } else {\n                JButton button = new JButton(\"Search\");\n                button.setActionCommand(code);\n                button.addActionListener(this);\n                return button;\n            }\n        }\n\n        @Override\n        public boolean isCellEditable(int rowIndex, int columnIndex) {\n            if (columnIndex == 2) {\n                return true;\n            }\n            return super.isCellEditable(rowIndex, columnIndex);\n        }\n\n\n\n\n        //MODIFIES: this\n        //EFFECTS: modify this so that the panel displays the latest information of stocks\n        public void update(List<String> codes) {\n            for (int i = 0; i < codes.size(); i++) {\n                String code = codes.get(i);\n                int cellIndex = -1;\n                for (int j = 0; j < tableModel.getRowCount(); j++) {\n                    if (code.equalsIgnoreCase((String)tableModel.getValueAt(j, 0))) {\n                        cellIndex = j;\n                        break;\n                    }\n                }\n                if (cellIndex != -1) {\n                    setValueAt(inventory.getQuantity(code), cellIndex, 1);\n                } else {\n                    addRow(code);\n                }\n            }\n            fireTableDataChanged();\n        }\n\n        //REQUIRES: code must be existing in the inventory\n        //MODIFIES: this\n        //EFFECTS: add a new row of stock information to the table and display it\n        public void addRow(String code) {\n            this.codes.add(code);\n            fireTableDataChanged();\n//            int quantity = inventory.getQuantity(code);\n//            JButton button = new JButton(\"Search\");\n//            button.setActionCommand(code);\n//            button.addActionListener(this);\n        }\n\n        //EFFECTS: return the name of the column\n        public String getColumnName(int col) {\n            return columnNames[col];\n        }\n\n\n        @Override\n        public void actionPerformed(ActionEvent e) {\n            JDialog dialog = new JDialog();\n            dialog.setLayout(new FlowLayout());\n            String selected = e.getActionCommand();\n            List<QuantityTag> tags = inventory.getQuantitiesAtLocations(selected);\n            Object[][] data = new Object[tags.size()][];\n            for (int i = 0; i < tags.size(); i++) {\n                QuantityTag tag = tags.get(i);\n                data[i] = new Object[]{\n                        tag.getLocation(), tag.getQuantity()\n                };\n            }\n            Object[] columnsForLocations = new Object[]{\"Location\", \"Quantity\"};\n            DefaultTableModel tableModel = new DefaultTableModel();\n            tableModel.setDataVector(data, columnsForLocations);\n            JScrollPane scrollPane = new JScrollPane(new JTable(tableModel));\n            scrollPane.setVisible(true);\n            scrollPane.setSize(500, 600);\n            dialog.add(scrollPane);\n            dialog.setSize(600, 700);\n            dialog.setVisible(true);\n        }\n    }\n\n\n    //A renderer than is responsible for rendering JButton in JTable\n    private class StockTableCellRenderer extends AbstractCellEditor\n            implements TableCellRenderer, TableCellEditor {\n\n\n\n        //REQUIRES: value must be of JButton type\n        //EFFECTS: convert the value into JButton and return it\n        @Override\n        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,\n                                                       boolean hasFocus, int row, int column) {\n            if (value instanceof JButton) {\n                return (JButton)value;\n            }\n            return new JLabel(value.toString());\n        }\n\n        @Override\n        public Component getTableCellEditorComponent(\n                JTable table, Object value, boolean isSelected, int row, int column) {\n\n            if (column == 2 || value instanceof JButton) {\n                return (JButton)table.getValueAt(row, column);\n                //return buttons.get(row);\n            }\n            return new TextField();\n        }\n\n\n        @Override\n        public Object getCellEditorValue() {\n            return new JButton();\n        }\n\n        @Override\n        public boolean isCellEditable(EventObject anEvent) {\n            return true;\n        }\n    }\n\n    //EFFECTS: create new stock panel with given inventory\n    public StockPanel(Inventory inventory) {\n        this.inventory = inventory;\n        tableModel = new StockTableModel();\n        JTable jtable = new JTable(tableModel);\n        jtable.setDefaultRenderer(jtable.getColumnClass(2), renderer);\n        jtable.setDefaultEditor(jtable.getColumnClass(2), renderer);\n        //jtable.getColumnModel().getColumn(2).setCellRenderer(renderer);\n        //jtable.getColumn(\"Search\").setCellEditor(renderer);\n        for (int i = 0; i < jtable.getColumnCount(); i++) {\n            jtable.getColumnModel().getColumn(i).setPreferredWidth(300);\n        }\n\n        add(jtable);\n        jtable.setSize(1000, 700);\n        setSize(1000, 1500);\n        setVisible(true);\n    }\n\n    //MODIFIES: this\n    //EFFECTS: update the table and this to display the latest information\n    public void update(List<String> codes) {\n        tableModel.update(codes);\n        revalidate();\n    }\n\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/ui/StockPanel.java b/src/main/ui/StockPanel.java
--- a/src/main/ui/StockPanel.java	(revision 5f2f3d1b6f9f16a95b3f4f89a849d39d9fa89a83)
+++ b/src/main/ui/StockPanel.java	(date 1636654875310)
@@ -1,107 +1,180 @@
 package ui;
 
 import model.Inventory;
+import model.InventoryTag;
+import model.Item;
 import model.QuantityTag;
 
 import javax.swing.*;
-import javax.swing.table.AbstractTableModel;
 import javax.swing.table.DefaultTableModel;
-import javax.swing.table.TableCellEditor;
 import javax.swing.table.TableCellRenderer;
+import javax.swing.tree.*;
 import java.awt.*;
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
-import java.util.EventObject;
+import java.time.LocalDate;
+import java.util.ArrayList;
 import java.util.List;
 
 //A panel that will display stock situation of the inventory
 public class StockPanel extends JPanel {
     private StockTableModel tableModel;
     private Inventory inventory;
-    private String[] columnNames = {"Code", "Quantity", "Search"};
-    private StockTableCellRenderer renderer;
+    private String[] columnNames;
+    private StockTree stockTree;
+
+
+
+
+
+
+    //represents a tree of data
+    private class StockTree extends JTree implements TableCellRenderer {
+        private DefaultMutableTreeNode root;
+        private DefaultTreeModel treeModel;
+
+        private StockTree(Object[][] data) {
+            root = new DefaultMutableTreeNode();
+            for (Object[] obj: data) {
+//                if (obj == null) {
+//                    throw new IllegalArgumentException();
+//                }
+                DefaultMutableTreeNode itemNode = new DefaultMutableTreeNode(obj);
+                root.add(itemNode);
+                Object[] entry = (Object[]) itemNode.getUserObject();
+                String id = (String)entry[1];
+                List<QuantityTag> tags = inventory.getQuantitiesAtLocations(id);
+//                if (!inventory.containsCategory((String)entry[0])) {
+//                    throw new IllegalArgumentException();
+//                }
+                for (QuantityTag tag: tags) {
+                    itemNode.add(new DefaultMutableTreeNode(tag));
+                }
+            }
+            treeModel = new DefaultTreeModel(root);
+            setModel(treeModel);
+//            addTreeSelectionListener(new TreeSelectionListener() {
+//                @Override
+//                public void valueChanged(TreeSelectionEvent e) {
+//                    DefaultMutableTreeNode locationNode = (DefaultMutableTreeNode)
+//                            e.getNewLeadSelectionPath().getLastPathComponent();
+//
+//                }
+//            });
+        }
+
+        public TreeModel getTreeModel() {
+            return treeModel;
+        }
+
+
+        public Object getValueAt(int row, int column) {
+            TreePath path = getPathForRow(row);
+            DefaultMutableTreeNode child = (DefaultMutableTreeNode)path.getLastPathComponent();
+            if (child.isLeaf()) {
+                QuantityTag tag = (QuantityTag)child.getUserObject();
+                if (column == 0) {
+                    return tag.getLocation();
+                }
+                return tag.getQuantity();
+            }
+
+            Object[] entry = (Object[])child.getUserObject();
+            if (entry == null) {
+                return null;
+            }
+            return entry[column];
+        }
+
+//        @Override
+//        public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected,
+//                                                      boolean expanded, boolean leaf, int row, boolean hasFocus) {
+//            return this;
+//        }
+
+        @Override
+        public Component getTableCellRendererComponent(JTable table, Object value,
+                                                       boolean isSelected, boolean hasFocus, int row, int column) {
+            return this;
+        }
+    }
 
     //represents a table model
     //that will contain information of stock situation with buttons to search for quantities at different locations
-    private class StockTableModel extends AbstractTableModel implements ActionListener {
-        List<String> codes = inventory.getListOfCodes();
-
+    private class StockTableModel extends DefaultTableModel implements ActionListener {
+        Object[][] tableData;
 
         private StockTableModel() {
-            renderer = new StockTableCellRenderer();
+            tableData = inventory.getData();
+            stockTree = new StockTree(tableData);
+            //setDataVector(tableData, columnNames);
+            setSize(new Dimension(500, 600));
+            //setDefaultRenderer(getColumnClass(0), renderer);
         }
 
         //EFFECTS: return row number
         @Override
         public int getRowCount() {
-            return codes.size();
+            if (tableData == null) {
+                return 1;
+            }
+            return tableData.length;
         }
 
         //EFFECTS: return column number
         @Override
         public int getColumnCount() {
-            return 3;
+            return columnNames.length;
         }
 
-        //EFFECTS: return the value in a particular cell.
         @Override
         public Object getValueAt(int rowIndex, int columnIndex) {
-            String code = codes.get(rowIndex);
-            if (columnIndex == 0) {
-                return code;
-            } else if (columnIndex == 1) {
-                return inventory.getQuantity(code);
-            } else {
-                JButton button = new JButton("Search");
-                button.setActionCommand(code);
-                button.addActionListener(this);
-                return button;
-            }
+            return stockTree.getValueAt(rowIndex, columnIndex);
         }
+
 
         @Override
         public boolean isCellEditable(int rowIndex, int columnIndex) {
-            if (columnIndex == 2) {
-                return true;
-            }
+//            if (columnIndex == 2) {
+//                return true;
+//            }
             return super.isCellEditable(rowIndex, columnIndex);
         }
 
 
 
+//
+//        //MODIFIES: this
+//        //EFFECTS: modify this so that the panel displays the latest information of stocks
+//        public void update(List<Item> items) {
+//            for (Item item : items) {
+//                int cellIndex = -1;
+//                for (int j = 0; j < tableModel.getRowCount(); j++) {
+//                    if (item.getId().equalsIgnoreCase((String) tableModel.getValueAt(j, 1))) {
+//                        cellIndex = j;
+//                        break;
+//                    }
+//                }
+//                if (cellIndex != -1) {
+//                    setValueAt(inventory.getQuantity(item.getId()), cellIndex, 1);
+//                } else {
+//                    addRow(item.convertToTableEntry());
+//                }
+//            }
+//            fireTableDataChanged();
+//        }
 
-        //MODIFIES: this
-        //EFFECTS: modify this so that the panel displays the latest information of stocks
-        public void update(List<String> codes) {
-            for (int i = 0; i < codes.size(); i++) {
-                String code = codes.get(i);
-                int cellIndex = -1;
-                for (int j = 0; j < tableModel.getRowCount(); j++) {
-                    if (code.equalsIgnoreCase((String)tableModel.getValueAt(j, 0))) {
-                        cellIndex = j;
-                        break;
-                    }
-                }
-                if (cellIndex != -1) {
-                    setValueAt(inventory.getQuantity(code), cellIndex, 1);
-                } else {
-                    addRow(code);
-                }
-            }
-            fireTableDataChanged();
-        }
-
-        //REQUIRES: code must be existing in the inventory
-        //MODIFIES: this
-        //EFFECTS: add a new row of stock information to the table and display it
-        public void addRow(String code) {
-            this.codes.add(code);
-            fireTableDataChanged();
-//            int quantity = inventory.getQuantity(code);
-//            JButton button = new JButton("Search");
-//            button.setActionCommand(code);
-//            button.addActionListener(this);
-        }
+//        //REQUIRES: code must be existing in the inventory
+//        //MODIFIES: this
+//        //EFFECTS: add a new row of stock information to the table and display it
+//        public void addRow(Item item) {
+//
+////            fireTableDataChanged();
+////            int quantity = inventory.getQuantity(code);
+////            JButton button = new JButton("Search");
+////            button.setActionCommand(code);
+////            button.addActionListener(this);
+//        }
 
         //EFFECTS: return the name of the column
         public String getColumnName(int col) {
@@ -111,83 +184,103 @@
 
         @Override
         public void actionPerformed(ActionEvent e) {
-            JDialog dialog = new JDialog();
-            dialog.setLayout(new FlowLayout());
-            String selected = e.getActionCommand();
-            List<QuantityTag> tags = inventory.getQuantitiesAtLocations(selected);
-            Object[][] data = new Object[tags.size()][];
-            for (int i = 0; i < tags.size(); i++) {
-                QuantityTag tag = tags.get(i);
-                data[i] = new Object[]{
-                        tag.getLocation(), tag.getQuantity()
-                };
-            }
-            Object[] columnsForLocations = new Object[]{"Location", "Quantity"};
-            DefaultTableModel tableModel = new DefaultTableModel();
-            tableModel.setDataVector(data, columnsForLocations);
-            JScrollPane scrollPane = new JScrollPane(new JTable(tableModel));
-            scrollPane.setVisible(true);
-            scrollPane.setSize(500, 600);
-            dialog.add(scrollPane);
-            dialog.setSize(600, 700);
-            dialog.setVisible(true);
+//            JDialog dialog = new JDialog();
+//            dialog.setLayout(new FlowLayout());
+//            String selected = e.getActionCommand();
+//            List<QuantityTag> tags = inventory.getQuantitiesAtLocations(selected);
+//            Object[][] data = new Object[tags.size()][];
+//            for (int i = 0; i < tags.size(); i++) {
+//                QuantityTag tag = tags.get(i);
+//                data[i] = new Object[]{
+//                        tag.getLocation(), tag.getQuantity()
+//                };
+//            }
+//            Object[] columnsForLocations = new Object[]{"Location", "Quantity"};
+//            DefaultTableModel tableModel = new DefaultTableModel();
+//            tableModel.setDataVector(data, columnsForLocations);
+//            JScrollPane scrollPane = new JScrollPane(new JTable(tableModel));
+//            scrollPane.setVisible(true);
+//            scrollPane.setSize(500, 600);
+//            dialog.add(scrollPane);
+//            dialog.setSize(600, 700);
+//            dialog.setVisible(true);
         }
     }
 
-
-    //A renderer than is responsible for rendering JButton in JTable
-    private class StockTableCellRenderer extends AbstractCellEditor
-            implements TableCellRenderer, TableCellEditor {
+//
+//    //A renderer than is responsible for rendering JButton in JTable
+//    private class StockTreeTableRenderer extends JTable {
+//
+//        TableCellRenderer renderer;
+//        public StockTreeTableRenderer(TableModel model) {
+//            this.renderer = renderer;
+//
+//        }
 
 
 
-        //REQUIRES: value must be of JButton type
-        //EFFECTS: convert the value into JButton and return it
-        @Override
-        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
-                                                       boolean hasFocus, int row, int column) {
-            if (value instanceof JButton) {
-                return (JButton)value;
-            }
-            return new JLabel(value.toString());
-        }
+//        @Override
+//        public Component getTableCellEditorComponent(
+//                JTable table, Object value, boolean isSelected, int row, int column) {
+//
+//            if (column == 2 || value instanceof JButton) {
+//                return (JButton)table.getValueAt(row, column);
+//                //return buttons.get(row);
+//            }
+//            return new TextField();
+//        }
+//
+//
+//        @Override
+//        public Object getCellEditorValue() {
+//            return new JTextField();
+//        }
+//
+//        @Override
+//        public boolean isCellEditable(EventObject anEvent) {
+//            return true;
+//        }
+//
+//        @Override
+//        public boolean shouldSelectCell(EventObject anEvent) {
+//            return false;
+//        }
+//
+//        @Override
+//        public boolean stopCellEditing() {
+//            return false;
+//        }
+//
+//        @Override
+//        public void cancelCellEditing() {
+//
+//        }
+//
+//        @Override
+//        public void addCellEditorListener(CellEditorListener l) {
+//
+//        }
+//
+//        @Override
+//        public void removeCellEditorListener(CellEditorListener l) {
+//
+//        }
+//    }
 
-        @Override
-        public Component getTableCellEditorComponent(
-                JTable table, Object value, boolean isSelected, int row, int column) {
-
-            if (column == 2 || value instanceof JButton) {
-                return (JButton)table.getValueAt(row, column);
-                //return buttons.get(row);
-            }
-            return new TextField();
-        }
-
-
-        @Override
-        public Object getCellEditorValue() {
-            return new JButton();
-        }
-
-        @Override
-        public boolean isCellEditable(EventObject anEvent) {
-            return true;
-        }
-    }
 
     //EFFECTS: create new stock panel with given inventory
     public StockPanel(Inventory inventory) {
         this.inventory = inventory;
+        columnNames = Inventory.getDataList();
         tableModel = new StockTableModel();
         JTable jtable = new JTable(tableModel);
-        jtable.setDefaultRenderer(jtable.getColumnClass(2), renderer);
-        jtable.setDefaultEditor(jtable.getColumnClass(2), renderer);
+        jtable.setDefaultRenderer(jtable.getColumnClass(2), stockTree);
+//        jtable.setDefaultEditor(jtable.getColumnClass(2), new JTextFiel);
         //jtable.getColumnModel().getColumn(2).setCellRenderer(renderer);
         //jtable.getColumn("Search").setCellEditor(renderer);
         for (int i = 0; i < jtable.getColumnCount(); i++) {
             jtable.getColumnModel().getColumn(i).setPreferredWidth(300);
         }
-
         add(jtable);
         jtable.setSize(1000, 700);
         setSize(1000, 1500);
@@ -196,11 +289,34 @@
 
     //MODIFIES: this
     //EFFECTS: update the table and this to display the latest information
-    public void update(List<String> codes) {
-        tableModel.update(codes);
+    public void update(List<Item> items) {
+        //tableModel.update(codes);
         revalidate();
     }
 
 
+    public static void main(String[] args) {
+        Inventory inventory = new Inventory();
+        inventory.createCategory("Fruit");
+        inventory.createItem("app", "apple", "Fruit", 4, "test", "test");
+        List<InventoryTag> tags = new ArrayList<>();
+        tags.add(new InventoryTag("abc", 20, 30, LocalDate.now(), "f11", 100));
+        inventory.addProducts(tags);
+//        if (inventory.getData() == null) {
+//            throw new IllegalArgumentException(
+        inventory.createItem("bnn", "banana", "Fruit", 12, "test", "test");
+        tags = new ArrayList<>();
+        tags.add(new InventoryTag("bnn", 1, 3, LocalDate.now(), "f13", 100));
+        inventory.addProducts(tags);
+        StockPanel panel = new StockPanel(inventory);
+        panel.setSize(500, 600);
+        JFrame frame = new JFrame();
+        frame.add(panel);
+        frame.pack();
+        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
+        frame.setVisible(true);
+    }
+
+
 
 }
